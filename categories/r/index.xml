<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Tea &amp; Stats</title>
    <link>https://selbydavid.com/categories/r/</link>
    <description>Recent content in R on Tea &amp; Stats</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Mon, 06 Dec 2021 10:00:00 +0000</lastBuildDate><atom:link href="https://selbydavid.com/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Indexing from zero in R</title>
      <link>https://selbydavid.com/2021/12/06/indexing/</link>
      <pubDate>Mon, 06 Dec 2021 10:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2021/12/06/indexing/</guid>
      <description>Everybody knows that R is an inferior programming language, because vector indices start from 1, whereas in real programming languages like C and Python, array indexing begins from 0.
Sometimes this can be quite annoying if a problem&amp;mdash;be it a mathematical algorithm or a coding challenge&amp;mdash;calls for zero-based indexing. You find yourself having to add + 1 to all your indices and it&amp;rsquo;s easy to introduce bugs or mix up values with their positions.</description>
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://selbydavid.com/2021/12/01/advent-2021/</link>
      <pubDate>Wed, 01 Dec 2021 09:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2021/12/01/advent-2021/</guid>
      <description>It’s that time of year again. And not just for Secret Santa—it’s time for the Advent of Code, a series of programming puzzles in the lead-up to Christmas.
I’m doing the 2021 challenge in R—in the form of an open-source R package, to demonstrate a test-driven workflow.
   Each puzzle description typically comes with a few simple examples of inputs and outputs. We can use these to define expectations for unit tests with the testthat package.</description>
    </item>
    
    <item>
      <title>There are now 3 different R pipes</title>
      <link>https://selbydavid.com/2021/05/18/pipes/</link>
      <pubDate>Tue, 18 May 2021 13:00:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2021/05/18/pipes/</guid>
      <description>R 4.1.0 has been released and has a couple of handy new features.
One is a shorthand syntax for defining functions. Now, instead of writing, for example
triple &amp;lt;- function(x) x * 3  you can use the more concise syntax
triple &amp;lt;- \(x) x * 3  which may come in handy when using anonymous functions in apply-type calls.
More interesting, though, is the addition of a native pipe operator to R, given by |&amp;gt;, i.</description>
    </item>
    
    <item>
      <title>The unequalled joy of non-equi joins</title>
      <link>https://selbydavid.com/2021/02/13/joins/</link>
      <pubDate>Sat, 13 Feb 2021 16:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2021/02/13/joins/</guid>
      <description>A common task in data analysis is to merge or join two tables according to shared keys or values. The operation is perhaps most commonly associated with relational databases and structured query language (SQL) but it’s just as useful in R with data frames.
Most joins are equi-joins, matching rows according to two columns having exactly equal values. These are easy to perfom in R using the base merge() function, the various join() functions in dplyr and the X[i] syntax of data.</description>
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://selbydavid.com/2020/12/06/advent-2020/</link>
      <pubDate>Sun, 06 Dec 2020 17:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2020/12/06/advent-2020/</guid>
      <description>Advent of Code is a series of programming puzzles you can tackle to hone your coding skills each day in the run-up to Christmas.
This year I am attempting it using R, which can make some challenges easier or harder depending on whether they are more ‘computer sciencey’ or more ‘data sciencey’. Generally it makes parsing datasets easier but low-level string manipulation more fiddly.
Here are my solutions so far. Where possible, I’ve tried to strike a balance between efficiency and readability, and to avoid using the packages I might usually use (e.</description>
    </item>
    
    <item>
      <title>Which film should I watch during lockdown?</title>
      <link>https://selbydavid.com/2020/05/06/films/</link>
      <pubDate>Wed, 06 May 2020 12:55:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2020/05/06/films/</guid>
      <description>My brother wrote to me this week with an interesting task:
 I&amp;rsquo;ve got a list of films I&amp;rsquo;ve noted down whenever I&amp;rsquo;ve seen a good review. But it&amp;rsquo;s hundreds long and I can never remember what a film is from its title and can&amp;rsquo;t be bothered to look them up each time. Any chance you can knock up a script that cross-references a Rotten Tomatoes score and quick synopsis so I can browse the list more easily?</description>
    </item>
    
    <item>
      <title>R code golf: the identity matrix</title>
      <link>https://selbydavid.com/2019/03/27/identity-matrix/</link>
      <pubDate>Wed, 27 Mar 2019 15:50:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2019/03/27/identity-matrix/</guid>
      <description>How many different ways are there to create an identity matrix in R? This was an interesting little challenge set by Guillaume Nicoulaud on Twitter.
In code golf, programmers try to write an algorithm using the shortest programme possible, often exploiting lesser-known eccentricies of each programming language.
This R challenge is less about minimising your golf handicap, however, and more about showing off some features and functions in R that others might not know about.</description>
    </item>
    
    <item>
      <title>Exploring influence in networks</title>
      <link>https://selbydavid.com/2018/03/07/influence/</link>
      <pubDate>Wed, 07 Mar 2018 15:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2018/03/07/influence/</guid>
      <description>I have just published an interactive graphic showing the effect of ranking scientific communities with pairwise comparison models. The visualisation is an interactive version of my (award-winning) useR!2017 poster, Ranking influential communities in networks.
You can see how academic journals have been grouped into communities based on their citation behaviour, and notice the relative ranking within and between fields. Occasionally journals don&amp;rsquo;t do so well within their field but are influential outside it, and vice versa.</description>
    </item>
    
    <item>
      <title>Building a neural network from scratch in R</title>
      <link>https://selbydavid.com/2018/01/09/neural-network/</link>
      <pubDate>Tue, 09 Jan 2018 10:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2018/01/09/neural-network/</guid>
      <description>Neural networks can seem like a bit of a black box. But in some ways, a neural network is little more than several logistic regression models chained together.
In this post I will show you how to derive a neural network from scratch with just a few lines in R. If you don’t like mathematics, feel free to skip to the code chunks towards the end.
This blog post is partly inspired by Denny Britz’s article, Implementing a Neural Network from Scratch in Python, as well as this article by Sunil Ray.</description>
    </item>
    
    <item>
      <title>Using R on Android</title>
      <link>https://selbydavid.com/2017/12/29/r-android/</link>
      <pubDate>Fri, 29 Dec 2017 15:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2017/12/29/r-android/</guid>
      <description>I just discovered a way to get R running on my smartphone, with full support for packages, graphics and R Markdown, and no need to connect to an external server. This is really handy for quickly checking R code, trying out ideas and writing blog posts on the go. It works quite well!
Here I will show you how to do the same on your Android device. This post was inspired by this answer on StackOverflow.</description>
    </item>
    
    <item>
      <title>useR! poster: ranking influential communities</title>
      <link>https://selbydavid.com/2017/06/29/user2017/</link>
      <pubDate>Thu, 29 Jun 2017 18:30:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2017/06/29/user2017/</guid>
      <description>Next week I will be presenting a poster at the useR!2017 conference in Brussels.
My topic is Ranking influential communities in networks. Using a large dataset of citations from the Web of Science, we grouped academic journals into communities based on their citation behaviour. These communities closely correspond to recognisable research fields, so I was able to label them.
We then modelled the flow of influence within and between these communities.</description>
    </item>
    
    <item>
      <title>Chernoff faces in ggplot2</title>
      <link>https://selbydavid.com/2017/06/25/ggchernoff/</link>
      <pubDate>Sun, 25 Jun 2017 18:25:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2017/06/25/ggchernoff/</guid>
      <description>I am pleased to introduce my first R package for general consumption, ggChernoff.
Inspiration stems from Leland Wilkinson’s book, The Grammar of Graphics, whose principles were later implemented as the layered grammar of graphics in Hadley Wickham’s popular R package, ggplot2.
Wilkinson’s grammar generalises data visualisation. Rather than choosing a types of graph from a list—for example bar plot, pie chart or line graphs—instead we break down graphics into algebra, scales, statistics, geometry, coordinates and aesthetics.</description>
    </item>
    
    <item>
      <title>Publishing from blogdown to GitHub with Travis</title>
      <link>https://selbydavid.com/2017/06/22/blogdown-travis/</link>
      <pubDate>Thu, 22 Jun 2017 08:00:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2017/06/22/blogdown-travis/</guid>
      <description>Yihui Xie&amp;rsquo;s new blogdown package is a brilliantly elegant and simple tool for creating R-themed blogs and web sites. Starting your own blog is as simple as one line of R code:
blogdown::new_site()  By default, blogdown uses Hugo, a static web site generator written in Google&amp;rsquo;s Go programming language. This has a number of advantages over Jekyll (the site generator that powers GitHub Pages) and from personal experience, everything just seems to work more smoothly.</description>
    </item>
    
    <item>
      <title>Pretty errors, warnings and messages in R Markdown</title>
      <link>https://selbydavid.com/2017/06/18/rmarkdown-alerts/</link>
      <pubDate>Sun, 18 Jun 2017 13:15:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2017/06/18/rmarkdown-alerts/</guid>
      <description>When knitting an R Markdown document to HTML output, R chunks can produce warnings, errors or messages.
Normally these messages look like any other console output:
Pretty ugly, and usually something I find myself trying to hide at the earliest opportunity.
But if you&amp;rsquo;re using R Markdown&amp;rsquo;s default template, which uses Twitter Bootstrap, you can promote warnings, errors and messages to first-class citizens.
What if you could have them looking like this?</description>
    </item>
    
    <item>
      <title>Deploying an R Markdown Jekyll site to GitHub Pages</title>
      <link>https://selbydavid.com/2017/06/16/rmarkdown-jekyll/</link>
      <pubDate>Fri, 16 Jun 2017 12:00:00 +0100</pubDate>
      
      <guid>https://selbydavid.com/2017/06/16/rmarkdown-jekyll/</guid>
      <description>GitHub Pages&#39; built-in Jekyll support makes it very easy for techie types to deploy static web sites. Simply push your plain text Markdown content to a repository and the server-side Jekyll engine will render it for the web.
Markdown is good, but R Markdown is even better, assuming we ever want to write anything involving plots or data analysis. How can we write and edit blog posts in R Markdown and serve them on GitHub Pages without having to build everything locally?</description>
    </item>
    
    <item>
      <title>Secret Santa in R</title>
      <link>https://selbydavid.com/2016/12/07/santa/</link>
      <pubDate>Wed, 07 Dec 2016 09:00:00 +0000</pubDate>
      
      <guid>https://selbydavid.com/2016/12/07/santa/</guid>
      <description>Our office just exchanged presents for Secret Santa, a tradition where each person is randomly assigned someone else to give an anonyous gift. One of the challenges of Secret Santa is keeping the pairs of gift-givers and receivers both random and secret. How can you do this while also taking part yourself? Using R, of course!
Firstly, recruit people! Write their names down, one per line, in a text file.</description>
    </item>
    
  </channel>
</rss>
